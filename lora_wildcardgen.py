import re
from typing import Literal
import os
import json
from safetensors import safe_open

loraDir = "E:\\stable-diffusion-windows\\newforge\\webui\\models\\Lora"


def getJsonFiles(loraDir):
    # add all json files to the list, along with their path (relative to the loraDir)
    jsonFiles = {}
    for root, dirs, files in os.walk(loraDir):
        for file in files:
            if file.endswith(".json"):
                jsonFiles[file] = os.path.relpath(os.path.join(root, file), loraDir)
    return jsonFiles

def getContainingDirs(jsonFiles):
    # getting all the directories that contain json files
    dirs = []
    for file in jsonFiles:
        dirs.append("\\".join(jsonFiles[file].split("\\")[:-1]))
    dirs = list(dict.fromkeys(dirs))
    return dirs

# # !!!!!! test
# chosenDir = "Characters"


def generateWildcard(chosenDir, generationMode: Literal["first", "allWithOR", "firstWithOr"], loraWeight = 0.7):
    jsonFiles = getJsonFiles(loraDir)
    wildcard = "{"
    # get all the files in the chosen directory
    for file in jsonFiles:
        if  "\\".join(jsonFiles[file].split("\\")[:-1]) == chosenDir:
            print(file)
            fullSafetensorsPath = os.path.join(loraDir, jsonFiles[file])[:-5] + ".safetensors"
            loraName = getLoraName(fullSafetensorsPath)
            wildcard += f"<lora:{loraName}:{loraWeight}> "

            # extract the activation text from the json generated by civitai browser +

            # * should also include parameters to the function that let you choose the following :
            # to get only the first entry
            # to use all entries as ORs (it puts all the entries in a list and joins them with " | " in the wildcard)
            # to use the first entry as required, and the rest as ORs (it puts the first entry in the wildcard, then joins the rest with " | ")
            fileData = json.load(open(os.path.join(loraDir, jsonFiles[file])))
            activationText = fileData["activation text"]
            # split_text will split the activation text into different ones, 
            # wherever he finds a comma, followed by an arbitrary number of spaces and another comma
            # we use regex for that
            split_text = re.split(r',\s*,', activationText)
            print(split_text)
            if generationMode == "first":
                wildcard += split_text[0] + " | "
            elif generationMode == "allWithOR":
                for text in split_text:
                    wildcard += text + " | "
            elif generationMode == "firstWithOr":
                wildcard += split_text[0] + " | "
                for text in split_text[1:]:
                    wildcard += text + " | "
            # wildcard += activationText + " | "
    wildcard = wildcard[:-3] + "}"
    return wildcard

def getLoraName(file_path):
    # Open the .safetensors file
    with safe_open(file_path, framework="pt", device="cpu") as f:
        # Check global metadata first
        # Get the metadata
        metadata = f.metadata()

        # Check if metadata exists and contains "ss_output_name"
        if metadata is not None and "ss_output_name" in metadata:
            activation_text = metadata["ss_output_name"]
            # print(f"Activation text (ss_output_name): {activation_text}")
            return activation_text
        else:
            # if metadata does not have the key "ss_output_name", it will return the name of the file (without the extension)
            return os.path.basename(file_path)[:-12]

if __name__ == "__main__":
    # print(getJsonFiles(loraDir))

    import requests
    # print(requests.get("http://127.0.0.1:7860/sdapi/v1/sd-models").json())
    loras = requests.get("http://127.0.0.1:7860/sdapi/v1/loras").json()

    for lora in loras:
        print(lora['name'])